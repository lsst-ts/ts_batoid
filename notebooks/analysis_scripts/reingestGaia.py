import os
import datetime
import numpy as np
import argparse
from astropy.table import Table
from astropy.coordinates import SkyCoord
from reingestCloseLoop import baseReingest  as baseReingest
from lsst.ts.wep.Utility import runProgram


parser = argparse.ArgumentParser(
    description='Reingest results of running ComCam AOS closed loop for GAIA DR2 catalogs')

parser.add_argument("--inputDir", type=str, default="",
                    help='input directory' )
parser.add_argument("--outputDir", type=str, default="",
                    help='output directory' )

parser.add_argument('--genFlats', type=bool, default=True, 
                    help = 'whether to generate the new flats (and ingest)')

parser.add_argument('--ingestRawDefocal', type=bool, default=True, 
                    help = 'whether to re-ingest the raw defocal images')
parser.add_argument('--isrDefocal', type=bool, default=True, 
                    help = 'whether to re-ISR the raw defocal images')

parser.add_argument('--ingestRawFocal', type=bool, default=True, 
                    help = 'whether to re-ingest the raw focal images')
parser.add_argument('--isrFocal', type=bool, default=True, 
                    help = 'whether to re-ISR the raw focal images')

parser.add_argument('--isrConfigfileName', type=str, default='isrConfig.py',
                    help='name of ISR config file generated by WEPCalculation while doing the ISR'  )
parser.add_argument('--rerunName', type=str, default='run1', 
                    help='name of input/rerun/XX directory with the postISR images')


args = parser.parse_args()


genFlats=args.genFlats
ingestRawDefocal=args.ingestRawDefocal
isrDefocal = args.isrDefocal

ingestRawFocal=args.ingestRawFocal, 
isrFocal=args.isrFocal,
isrConfigfileName = args.isrConfigfileName,

rerunName = args.rerunName


if (len(args.inputDir)>0) and (len(args.outputDir)>0) : 
    print("\nUsing the following as the inputDir and outputDir")
    inputDir = 'results_gaia/%s'%args.inputDir
    outputDir = 'results_gaia/%s'%args.outputDir
    print(inputDir)
    print(outputDir)
     
else:
	print("Need to provide inputDir and outputDir names relative to results_gaia/")


# if just redoing the calibs and ISR, but staying in the same directory 
# (no need to re-ingest the raw images)
if inputDir == outputDir:
    print('\n Since inputDir and outputDir are the same')
    print('We assume that the raw images have already been ingested,')
    print('and we see the following:')
    fileList = os.listdir(os.path.join(outputDir, 'input'))
    print('outputDir/input/ contains the following:',fileList)

    if 'registry.sqlite3' in fileList:
        print('We found the raw image registry file "registry.sqlite3" in that list, so setting:')
        ingestRawDefocal = False
        ingestRawFocal = False 
        print('ingestRawDefocal=%s'%ingestRawDefocal)
        print('ingestRawFocal=%s'%ingestRawFocal)
    
    if 'calibRegistry.sqlite3' in fileList:
        print('The old calibs registry is still there -  removing it and the ingested flats:')
        command = "rm"
        argstring ="-rf %s"%os.path.join(outputDir,'input/flat/')
        runProgram(command,argstring=argstring)
        print(command, argstring)

        command = "rm"
        argstring ="-f %s"%os.path.join(outputDir,'input/calibRegistry.sqlite3')
        runProgram(command,argstring=argstring)
        print(command, argstring)

    if os.path.exists(os.path.join(outputDir, 'input/rerun/run1')):
        print('There is already rerun/run1 with the previous ISR results')
        print('Changing the rerunName to run2 and isrConfig.py to isrConfig2.py:')
        rerunName = 'run2'
        isrConfigfileName = 'isrConfig2.py'  


# Else, if we are reingesting the file      
else:
    # Copy the results of the prior PhoSim run
    # if need to completely reingest the raw images with
    # a new stack ... 
    if not os.path.exists(outputDir):
        print('\nCopying entire content of %s ...'%inputDir)
        print('This includes calibs, OPD, defocal images, \
            ingested images, postISR, etc.')

        #first copy the old results...
        argString = '-a '+inputDir+'/. '+outputDir+'/'
        runProgram("cp", argstring=argString)


        # ensure that input/ is empty
        argString = '-rf  '+ os.path.join(outputDir,'input')
        print('Removing entire /input/* (-rf)')
        runProgram("rm", argstring=argString)


print('\nStarting reingest  ')

print('The outputDir is %s'%outputDir)


# initialize the reingestCloseLoop.py Class 
print('Starting reingestCloseLoop : ')
reingest = baseReingest() 
reingest.main(baseOutputDir = outputDir, 
              genFlats=genFlats, 
              ingestRawDefocal=ingestRawDefocal, 
              isrDefocal = isrDefocal,
              ingestRawFocal=ingestRawFocal, 
              isrFocal=isrFocal,
              isrConfigfileName = isrConfigfileName,
              rerunName = rerunName
              )
print('Done running reingest for %s \n\n'%outputDir)

# # # move the screenlog generated  by screen -LS  if it exists ... 
# screenlog_path = '/astro/store/epyc/users/suberlak/Commissioning/aos/ts_phosim/notebooks/analysis_scripts'
# screenlog_default = os.path.join(screenlog_path,'screenlog.0')

# if os.path.exists(screenlog_default):
#     now = datetime.datetime.now()
#     date = now.strftime("%Y-%m-%d_%H:%M:%S")
#     screenlog = 'screenlog_%s.txt'%(date)
#     argString = screenlog_default + ' '+outputDir+'/'+screenlog
#     runProgram("mv ", argstring=argString)
#     print('Screenlog saved as %s'%screenlog)
